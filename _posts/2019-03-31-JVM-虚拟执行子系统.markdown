---
layout:     post
title:      "虚拟执行子系统"
subtitle:   "类结构，加载机制，执行引擎"
date:       2019-03-31
author:     "Paul"
header-img: "img/post-bg-unix-linux.jpg"
tags:
    - JVM
    - 子系统
    - 类结构
    - 加载机制
    - 执行引擎
---

> 深入了解JVM系列



**Class文件的结构**

Class文件是以8位字节为基础的二进制六，各个数据项严格按照顺序紧凑地排列在Class文件之中，中间没有任何分隔符。

Class文件的前四个字节称为魔数，它唯一的作用是用于确定这个文件是否为一个可以被虚拟机接受的Class文件。

接着魔数的四个字节存储的是Class文件的版本号，第五个和第六个字节是次版本号，第七个和第八个字节是主版本号。

紧接着主版本号之后是常量池的入口。常量池是Class文件结构中与其他项目关联最多的数据类型。

常量池结束之后紧接着两个字节是访问标志，表明这个Class是类还是接口，是否定义为public，abstract，是否被声明为final等等。





**虚拟机类加载机制**

虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验，转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型，这就是虚拟机的类加载机制。

类从被加载到虚拟机内存中开始，到卸载出内存为止，它的整个生命周期包括了：加载，验证，准备，解析，初始化，使用，卸载七个阶段。其中验证，准备和解析三个部分统称为连接。

![classlife](/imgblog/classlife.png)

对于什么时候进行类的加载，虚拟机规范中并没有进行强制约束。但是以下几种情况时，必须对类进行初始化（加载，验证，准备则肯定要在此之前完成）。

* 遇到new，getstatic，putstatic或invokestatic这四条字节码指令时，如果没有初始化则要先触发其初始化。生成这4条指令的java代码场景是：使用new关键字实例化对象的时候，读取或者设置一个类的静态字段，或调用一个类的静态方法时。
* 使用java.lang.reflect包进行反射调用时，如果没有初始化，则先要进行初始化。
* 当初始化一个类的时候，发现其父类还没被初始化，则需要先触发父类的初始化。
* 虚拟机启动时，用户需要指定一个执行的主类（包含main方法的类），虚拟机会先初始化这个主类。

这四种场景称为对一个类进行主动引用，除此之外所有引用类的方式都不会出发初始化。

被动使用类字段演示：

通过子类引用父类的静态字段，不会导致子类初始化：

```Java
pulbic class Super{
  static{
    System.out.println("super init");
  }
  public static int value = 123;
}

public class SubClass extends SuperClass{
  static{
    System.out.println("sub init");
  }
}
public class NotInitialization{
  public static void main(String[] args){
    System.out.println(SubClass.value);
  }
}
```

这段程序只会输出"Super init"，而不会输出"Sub init"。对于静态字段，只有直接定义这个字段的类才会被初始化。

常量在编译阶段会存入调用类的常量池，本质上没有直接饮用到定义常量的类，因此不会出发定义常量的类的初始化：

```java
public class ConstClass{
  static{
    System.out.println("ConstClass init!");
  }
  public static final String HELLOWORLD = "hello world";
}
public class NotInitialization{
  public static void main(String[] args){
    System.out.println(ConstClass.HELLOWORLD);
  }
}
```

这段代码运行后不会输出ConstClass init，因为虽然在Java源码中引用了ConstClass类中的常量HELLOWORLD，但是在编译阶段这个值就已经被存到了常量池中，对ConstClass.HELLOWORLD的引用实际都转化为了NotInitialization类对自身常量池的引用了。这两个类在编译成Class之后就不存在任何联系了。



接口有一点不同，当一个类在初始化时，要求其父类全部都已经初始化过了，但是一个接口在初始化时，并不要求其父接口全部都完成了初始化，只有真正使用到了父接口才会初始化。



**类加载的过程**

* 加载：加载是类加载的第一个阶段，这个阶段，首先要根据类的全限定名来获取定义此类的二进制字节流，将字节流转化为方法区运行时的数据结构，在Java堆生成一个代表这个类的java.lang.class对象，作为方法区的访问入口。

* 验证：这一步的目的时确保Class文件的字节流包含的信息符合当前虚拟机的要求。

* 准备：准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些内存都会在方法区中进行分配。仅仅是类变量，不包括实例变量。

  ```java
  public static int value = 123;
  ```

  变量在准备阶段过后的初始值为0而不是123，123的赋值要在变量初始化以后才会完成。

* 解析：虚拟机讲常量池内的符号引用替换为直接饮用的过程。

* 初始化：初始化是类加载的最后一步，这一步会根据程序员给定的值去初始化一些资源。



**类和类加载器**

虚拟机设计团队把类加载阶段中的"通过一个类的全限定名来获取描述此类的二进制字节流"这个动作放到Java虚拟机外部去实现，以便让程序自己去决定如何获取所需要的类，这个动作的代码模块称为"类加载器"。

对于一个类，都需要由加载它的类加载器和这个类本身一同确立其在Java虚拟机中的唯一性，比较两个类是否相等需要在这两个类是由同一个类加载器加载的前提下才有意义。



**双亲委派模型**

Java虚拟机的类加载器可以分为以下几种：

* 启动类加载器（Bootstrap ClassLoader）：这个类负责将<JAVA_HOME>\lib 目录中的类库加载到内存中，启动类加载器无法被Java程序直接饮用。
* 扩展类加载器（Extension ClassLoader）：负责加载<JAVA_HOME>\lib\ext目录中的类。开发者可以直接使用扩展类加载器。
* 应用程序类加载器（Application ClassLoader）：这个类加载器是ClassLoader中getSystemClassLoader（）方法的返回值，所以一般称为系统类加载器。如果没有自定义过加载器，一般情况下这个就是默认的类加载器。

![classloader](/imgblog/classloader.png)



双亲委派模型的工作过程是：如果一个类加载器收到了类加载的请求，它首先不会去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此。只有当父类加载器反馈自己无法完成这个加载请求（他的搜索范围中没有找到所需的类）时，子类加载器才会尝试去加载。



好处：使用双亲委派模型的好处是，Java类随着它的类加载器一起具备了一种带有优先级的层次关系，比如java.lang.Object，它存放在rt.jar中，无论哪一个类加载器要加载这个类，最后都是委派给启动类加载器进行记载。

如果不使用双亲委派模型，用户自己洗一个Object类放入classPath，那么系统中将会出现多个不同的Object类，Java类型体系中最基础的行为也就无从保证。

现在你可以尝试自己写一个名为Object的类，可以被编译，但永远无法运行。



**字节码生成技术与动态代理的实现**

Java中除了javac和字节码类库外，使用到字节码生成的例子还有很多，比如Web服务器中的JSP编译器，编译时织入的AOP框架，动态代理技术，甚至反射时虚拟机都有可能会在运行时生成字节码来提高执行速度。

用过Spring，大多数情况下都用过动态代理，因为如果Bean是面向接口编程，那么Spring 内部则是通过动态代理的方式对Bean进行增强的。动态的优势是在于实现了原始类和接口未知的时候，就确定代理类的代理行为。