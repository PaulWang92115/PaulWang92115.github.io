---
layout:     post
title:      "垃圾收集器与内存分配策略"
subtitle:   "垃圾收集算法，垃圾收集器，内存分配与回收策略"
date:       2019-03-27
author:     "Paul"
header-img: "img/post-bg-unix-linux.jpg"
tags:
    - JVM
    - 算法
    - 垃圾回收
    - 收集器
    - 分配与回收策略
---

> 深入了解JVM系列



**概述**

不管是内存分配还是垃圾回收，我们关注的都是Java堆这块内存区域，因为对于程序计数器，虚拟机栈，本地方法栈来说，他们随线程而生，随线程而灭，所以这个区域的内存分配和回收可以看作具备确定性。方法区在分配完类相关信息后内存大小也基本确定了。



**在谈引用**

在JDK1.2 之前，Java中的引用定义的很传统，只有被引用和没有被引用两种状态。1.2之后对引用的概念进行了扩充，将引用分为强引用，软引用，弱引用和虚引用四种，引用强度依次逐渐减弱。

* 强引用就是指程序代码之中普遍存在的，类似Object obj = new Object()，这类的引用，只要强引用存在，垃圾收集器永远不会回收掉被引用的对象。
* 软引用用来描述一些还有用但是非必须的对象。对于软引用关联的对象，在系统要发生内存溢出前会把他们列入回收范围之内，如果还没有足够内存，则会抛出内存溢出异常。用SoftReference类来实现软引用。
* 虚引用时最弱的引用引用关系，存在这种引用完全不会对其生存时间构成影响，也无法用虚引用来取得一个实例对象。这个虚引用关联的唯一目的就是希望能在这个对象被垃圾收集器回收时收到一个系统通知。



**如何判断对象已死？**

- 引用计数器

  每当有一个地方引用它时，计数器值就加一，引用失效时，计数器值剪一。简单高效，但是没办法解决循环引用的问题。

- 可达性分析算法

  这个算法的基本思路就是通过一系列名为GC ROOTS的对象作为起始点，从这些节点开始向下搜索。当一个对象到GC ROOTS没有任何引用链接时，则证明此对象时不可用的。

  可以作为GC ROOTS的对象包括下面几种：

  1. 方法里引用的对象。

  2. 方法区中的类静态属性引用的对象。

  3. 方法区中的常量引用的对象。

  4. 本地方法中引用的对象。

  

**回收方法区**

很多人认为方法区是没有垃圾收集的，Java虚拟机规范也确实说过可以不要求在虚拟机方法区实现垃圾收集，而且在这个地方收集性价比比较低。在堆中，一次可以回收70%～95%的空间，而永久代的效率远低于此。

方法区垃圾收集主要回收两部分内容：废弃常量和无用的类。



**垃圾收集算法**

* 标记-清除算法

  算法分为"标记"和"清除"两个阶段，首先要标记出所有需要回收的对象，在标记完成后统一回收掉所有被标记的对象。

  缺点：效率问题，标记和清除过程的效率都不高，另外会有不连续的内存碎片。

  ![biaojiqingchu](/imgblog/biaojiqingchu.png)

* 标记-整理算法

  复制收集算法在对象存活率较高时就要执行较多的复制操作，效率会变的很低。而且如果不想浪费50%的空间，就需要有额外的空间进行分配担保，以应对对象100%存活的极端情况，所以老年代一般不选这种算法。

  标记整理算法和标记清除算法的标记过程一样，后序有一个对内存进行整理的动作。

  ![biaojizhengli](/imgblog/biaojizhengli.png)

* 复制算法

  为了解决效率问题，复制算法出现了，将内存按容量划分为大小相等的两块，每次只使用其中的一块。清除后将活着的对象复制到另外一块上面。简单高效。

  ![fuzhi](/imgblog/fuzhi.png)

  现在的商业虚拟机都采用这种收集算法来回收新生代。因为新生代中的对象98%都是朝生夕死的，所以并不需要按1:1划分内存，而是按8:1:1分为Eden，survivor，survivor。每次只使用Eden和其中一块Survivor。当回收时，将Eden和Survivor中还存活的对象一次性拷贝到另外一块Survivor上。

  当Survivor空间不够用时，需要依赖老年代进行分配担保。



**分代收集算法**

当前的商业虚拟机的垃圾收集都采用分代收集的算法，这种算法并没有什么新的思想。只是根据对象的存活周期将不同的内存划分为几块。一般是把java堆分为新生代和老年代。新生代采用复制算法，老年代采用标记清除和标记整理算法。



**垃圾回收器**

如果说收集算法是内存回收的方法论，垃圾收集器就是内存回收的具体实现。下面介绍基于HotSpot的集中垃圾收集器。

* Serial收集器

  最早的垃圾收集器，新生代，单线程。这里的单线程不仅仅说明它只会使用一个CPU或者一条收集线程去完成垃圾收集工作，重要的是，在进行垃圾收集时，必须暂停其他所有工作线程（Stop The World）。

* ParNew收集器

  新生代，ParNew收集器其实就是Serial收集器的多线程版本，在可控制参数，收集算法，Stop The World和对象分配规则，回收策略都与Serial相同。ParNew在单核甚至双核CPU上的表现不如Serial，更多的CPU才能体现他的优点。

* Parallel Scanvnge收集器

  新生代，复制算法，关注吞吐量，不关注停顿时间。停顿时间越短就越适合需要于用户交互的程序，良好的相应速度能提升用户的体验。高吞吐量则可以最高效率地利用CPU时间，尽快完成运算任务，适合在后台运算而不需要太多交互的任务。

* Serial Old收集器

  Serial的老年代版本，单线程，使用标记-整理算法。

* Parallel Old收集器

  Parallel New的老年代版本，使用标记整理算法。

* CMS收集器

  CMS时一种以获取最短回收停顿时间为目标的收集器，注重相应速度。基于标记-清除算法实现的。不同于其他收集器的全程Stop The World，CMS会有两次短暂的Stop The World，垃圾收集和工作线程并发执行。整个过程分为4个步骤：

  1. 初始标记（Stop The World），标记GC Roots能关联到的对象。
  2. 并发标记 
  3. 重新标记（Stop The World）
  4. 并发清除



* G1收集器

  基于标记-整理实现。可以实现在基本不牺牲吞吐量的前提下完成低停顿的内存回收，新生代和老年代都可以回收。





**内存分配与回收策略**

首先需要了解两个名词：

Minor GC：新生代GC，指的是发生在新生代的垃圾收集动作，因为Java对象大多都具有朝生夕灭的特性，所以Minor GC非常频繁，一般回收速度也比较快。

Full GC：老年代GC，出现了Full GC，一般也会伴随至少一次的Minor GC（非绝对的）。

对象的内存分配，往大了讲就是在堆中分配。下面是更细粒度的分配策略。

* 对象优先在Eden中分配，大多数情况下，对象在新生代Eden中分配，当Eden没有足够的共建进行分配时，虚拟机讲发起一次Minor GC。

* 大对象直接进入老年代，大对象指的是那些需要连续内存空间的Java对象，最典型的大对象就是那种很长的字符串以及数组。直接进入老年代避免了大对象在Eden区和Survivor区之间发生大量的内存拷贝。

* 长期存活的对象将进入老年代，虚拟机给每个对象定义了一个对象年龄计数器，如果对象在Eden出生并经过一次Minor GC后仍然存活，并且能被Survivor容纳就会被移动到Survivor中，并且年龄设为1。当年龄达到某个阙值（默认为15）时，就会晋升到老年代。

  