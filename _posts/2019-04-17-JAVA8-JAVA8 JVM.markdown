---
layout:     post
title:      "JAVA8 JVM"
subtitle:   "JAVA8，JVM"
date:       2019-04-14
author:     "Paul"
header-img: "img/12.jpg"
tags:
    - JAVA8
    - JVM
---



> JAVA8 新特性

**内存模型的更改**
* JAVA8之前的内存模型
  ![jvm7](/imgblog/jvm7.png)

对于JVM的具体指示我们就不做过多介绍了，我前面的博客有对JVM所有知识的整体梳理，如果你想深入了解Java和这章的内容，可以提前了解一下。

对于方法区，它是线程共享的，主要用于存储类的信息，常量池，方法数据，方法代码等。方法区逻辑上属于堆的一部分。我们称这个区域为永久代。

大部分程序员应该都见过“java.lang.OutOfMemoryError:PermGen space”，这里的PermGen space其实指的就是方法区。由于方法区主要存储类的相关信息，所以对于动态生成类的情况比较容易出现永久代的内存溢出，典型的场景是在jsp页面比较多的情况，容易出现永久代内存溢出。

在JDK 1.8中，HotSpot已经没有“PermGen soace”这个区间了，取而代之的是一个叫做Metaspace(元空间)的东西。

* JAVA8之后的内存模型
  ![jvm8](/imgblog/jvm8.png)
  元空间的本质和永久代类似，都是对JVM规范中方法区的实现。不过与永久代最大的区别是：元空间不再虚拟机中，而是使用本地内存。默认情况下，元空间的大小仅受本地内存限制。

在JDK 1.7中，存储在永久代的部分数据就已经转移到了Java Heap或者是Native Heap了。永久代仍然存在于JDK 1.7中，并没有完全溢出。比如符号引用转移到了native heap，字面量，常量池和类的静态变量转移到了jave heap。

**更改的原因**
* 字符串常量存在永久代中，容易出现性能问题和内存溢出。
* 类和方法的信息等比较难确定大小，因此对于永久代大小的指定比较困难，太小容易出现永久代溢出，太大容易导致老年代溢出。
* 永久代回味GC带来不必要的复杂度，并且回收效率偏低。