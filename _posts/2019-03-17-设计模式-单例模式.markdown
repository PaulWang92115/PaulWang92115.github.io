---
layout:     post
title:      "设计模式-单例模式"
subtitle:   "设计模式，单例，后端，Java"
date:       2019-03-17
author:     "Paul"
header-img: "img/post-bg-js-version.jpg"
tags:
    - 后端开发
    - 设计模式
    - 单例
---


设计模式代表了某一类问题解决方法的最佳实践，通常被一些经验丰富的开发人员使用，在一些比较成熟和优秀的框架中也随处可见设计模式的身影。你可以把它看作一类问题的解决方案。

**单例模式**

单例模式顾名思义就是全局只有唯一一个实例，比如在系统开发中的资源管理器，数据库连接池等等。

单例模式确保一个类只有一个实例，并且提供一个全局访问点。

写法总结：构造方法私有化（防止通过构造方法创建对象），实例化变量引用私有化，获取实例的方法公有。

* **懒汉模式，线程不安全**

  ```java
  public class Singleton {
      private Singleton(){};
      private static Singleton instance;
      public static Singleton getInstance(){
          if(instance == null){
              instance = new Singleton();
          }
          return instance;
      }
  }
  
  ```

  懒汉模式指的是这个单例类在用的时候会延迟加载，但是这个单例类是线程不安全的，在多线程环境下很容易出现多个实例的情况。

* **懒汉模式，线程安全**

  ```java
  public class Singleton {
      private Singleton(){};
      private static Singleton instance;
      public synchronized static Singleton getInstance(){
          if(instance == null){
              instance = new Singleton();
          }
          return instance;
      }
  }
  
  ```

  只要在上面的线程不安全模式下进行简单的修改就可以编程线程安全的，将getInstance方法用synchronized修饰，确保同一个时刻只能有一个线程访问此方法。

* **饿汉模式**

  ```java
  public class Singleton {
      private Singleton(){};
      private static Singleton instance = new Singleton();
      public static Singleton getInstance(){
          return instance;
      }
  }
  ```

  将需要获取的instance实例在类加载的时候就实例化完毕，由于类的加载机制，此时静态变量的实例化只会执行一遍，所以可以保证此实例变量的唯一性。但是此时不具有延迟加载的特性。

* **饿汉模式，变种**

  ```java
  public class Singleton {
      private Singleton(){};
      private static Singleton instance = null;
      static {
          instance = new Singleton();
      }
      public static Singleton getInstance(){
          return instance;
      }
  }
  
  ```

  和上面的饿汉模式其实差别不大，只不过将实例化的动作放到了静态代码块来执行。

* **静态内部类**

  ```java
  public class Singleton {
      private Singleton(){};
      private static class SingleHolder{
          private static Singleton instance = new Singleton();
      }
      public static Singleton getInstance(){
          return SingleHolder.instance;
      }
  }
  
  ```

  使用到了静态内部类的特性，只有使用到instance实例的时候才会被初始化，同时用到了静态变量的实例化机制确保全局只有一个实例，性能比较好。

* **枚举模式**

  ```Java
  public enum  Singleton {
      INSTANCE;
      public Singleton getInstance(){
          return INSTANCE;
      }
  }
  ```

  枚举模式被认为是最安全最为有效的单例模式解决方案，解决了其他释放方式通过反射方式获取构造器，序列化等等的缺陷，它是在JVM层面实现的线程安全。如果想要了解这一部分，可以参考Joshua Bloch的[《Effective Java》](https://book.douban.com/subject/2696119/)。

* **双重校验锁**

  ```java
  public class  Singleton {
      private Singleton(){};
      private volatile static Singleton instance;
      public static Singleton getInstance(){
          if(instance == null){
              synchronized (Singleton.class){
                  if(instance == null){
                      instance = new Singleton();
                  }
              }
          }
          return instance;
      }
  }
  
  ```

  双重校验锁解决了饿汉模式下每次都要获取synchronized同步锁的问题。第一次校验，会检查变量是否已经被实例化，如果实例化了就不去争取锁了，直接返回。如果没有第二次校验，可能会出现两个线程同时读到实例为null的情况。此时第二校验就需要加锁区判断实例是否为null了。

  volatile的作用是防止JVM指令重排导致出现错误，在某个线程创建单例对象时，在构造方法被调用前，就为该对象分配了内存空间并设置了默认值，此时就可以将分配的内存地址赋值给instance字段了，但是他可能还没有被初始化，此时另一个对象来调用getInstance，取到的就是状态不正确的对象，volatile能够防止指令重排序。



#### 著作权声明


作者 [王帅](https://paulwang92115.github.io)，转载请保留以上链接
