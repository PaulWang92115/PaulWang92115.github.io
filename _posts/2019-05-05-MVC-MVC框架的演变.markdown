---
layout:     post
title:      "MVC框架的演变"
subtitle:   "JAVA，MVC，模型"
date:       2019-05-05
author:     "Paul"
header-img: "img/15.jpg"
tags:
    - JAVA
    - MVC
    - 模型
---



> MVC

* Servelet的基本执行过程

  Servelt是运行在服务端的Java应用程序，可以接收客户端请求和相应的数据。

  构建一个Servelt应用程序也非常简单，新建一个Java类继承HttpServlet类，在web.xml文件中配置访问映射就可以了。

  Web容器会创建对应Servlet的实例，并且调用对应的doGet，doPost方法。

  ```xml
  <servlet>
  	<servlet-name>login</servlet-name>
    <servlet-class>com.abc.pkg.LoginServlet</servlet-class>
  </servlet>
  <servlet-mapping>
  	<servlet-name>login</servlet-name>
    <url-pattern>/login</url-pattern>
  </servlet-mapping>
  //后续版本可以使用@WebServlet(name="abc"，urlPatterns="/add")来配置
  ```

  

  ```java
  public class LoginServelet extends HttpServlet{
    
    //service方法负责根据请求方式进行分发
    protect void service(HttpServletRequest request,HttpServletResponse response) throw Servet Exception{
      	String	method = request.getMethod();
      	if("GET".equals(method)){
          	doGet(request,response);
        }else if("POST".equals(nmethod)){
          	doPost(request,response);
        }
    }
    
    @Override
    public void doGet(HttpServletRequest request,HttpServletResponse response) throw Servet Exception{
      	System.out.println("123123");
    }
    
      @Override
    public void doPost(HttpServletRequest request,HttpServletResponse response) throw Servet Exception{
      	doGet(request,response);
    }
  }
  ```



* 常规Web项目的实现及改造

  如果为每一个增删改查都写一个Servlet的话就会非常繁琐。基于Servlet的基础上进行改进。

  ```java
  public abstract class BaseServlet extends HttpServlet{
    
    	@Override
    	protected void servide(HttpServletRequest request,HttpServletResponse response) throws ServletException{
        	//this 指代的是调用它的对象，BaseServlet是抽象方法，这里的this应该是它的实现类
        	System.out.println(this);
        
        	//和SpringMVC的思想相同
        	//1.确定当前方法的调用类
        	//2.确定调用这个类的哪一个方法
        	//3.通过反射机制调用这个方法
        	//4.通过方法返回值确定转发还是重定向
      }
  }
  ```

  

* 深入Spring MVC框架的核心

  IOC：把对象的创建以及维护对象生命周期的过程交给外部容器实现的行为。

  DI：在对象的运行期间，动态的将需要的依赖对象注入到该对象中。

  1. 通过构造函数注入
  2. 通过setter注入
  3. 通过注解注入

  Controller(控制层)->Service(业务逻辑层)->DAO(数据访问层)。

  ```java
  ----------------------DAO-----------------------
  public interface DAO{ void add(Object obj); }
  public class DAOImpl implements DAO{
    public void add(Object obj){
    }
  }
  ----------------------Service--------------------
  public interface Service{ save(Object obj); }
  public class ServiceImpl implements Service{
    //常规方式，通过new关键字创建数据访问层的实例
    //这里实例化了一个对象，使程序的耦合度变高了
    DAO dao = new DAOImpl();
    
    //解藕的方式是把创建对象的方式放到外部去做或者使用一个工厂去做
    //把这个对象的创建以及维护生命周期的过程交给Spring容器来做，也称为IOC，控制反转
    //注解注入
    @AutoWired/@Resource
    private DAO dao;
    
    
    //构造注入
    DAO dao;
    public ServiceImpl(DAO dao){
      this.dao = dao;
    }
    
    //setter注入
    DAO dao;
    public void setDao(DAO dao){
      this.dao = dao;
    }
    
    public void save(Object obj){
      dao.save(obj);
    }
  }
  ```

  

  

  

  