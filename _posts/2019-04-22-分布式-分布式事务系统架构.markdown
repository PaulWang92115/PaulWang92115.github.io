---
layout:     post
title:      "分布式事务架构"
subtitle:   "JAVA，分布式，事务，架构"
date:       2019-04-22
author:     "Paul"
header-img: "img/14.jpg"
tags:
    - JAVA
    - 分布式
    - 事务
---



> 分布式

基于可靠消息的最终一致性方案（异步确保型）。

TCC事务补偿型方案（也属于两阶段型的一种方案，但区别与2PC协议的两阶段提交）。

最大努力通知型方案。



对于一个支付系统来说，这三种分布式事务框架配合使用才能使业务的流程进展的顺利。

* 可靠消息最终一致性方案。

对应支付系统会计异步记账业务。

银行通知结果信息存储与驱动订单处理。

* TCC方案

对应支付系统的订单账户操作：订单处理，资金账户处理，积分账户处理。

* 最大努力通知型方案

对应支付系统的商户通知业务场景。

https://blog.csdn.net/qq_27384769/article/details/79302497

**事务**

![transaction](/imgblog/transaction.png)

**本地事务**

在单个数据库的本地并且限制在单个进程内的事务。

本地事务不涉及多个数据来源。

资源管理器一般由数据库实现。

![localtransaction](/imgblog/localtransaction.png)

**全局事务（DTP模型）—标准分布式事务**

AP（Application Program）：应用程序。

RM（Resource Manager）：资源管理器，可以是一个DBMS，或者消息服务管理系统，应用程序通过资源管理器对资源进行控制，资源必须实现XA定义的接口。

TM（Transaction Manager）：事务管理器，负责协调和管理事务，提供给AP应用程序编程接口以及管理资源管理器。

事务管理器控制着全局事务，管理事务声明周期，并协调资源。资源管理器负责控制和管理实际资源。

> XA

XA是由X/Open组织提出的分布式事务管理的规范。定义了全局事务管理器和局部资源管理器之间的接口。主流的关系型数据库产品都是实现了XA接口的。

XA接口是双向的系统接口，在事务管理器以及一个或多个资源管理器之间形成通信桥梁。

由全局事务管理器管理和协调的事务，可以跨越多个资源和进程，全局事务管理器一般使用XA耳机断提交协议与数据库进行交互。

![DTP](/imgblog/DTP.png)



**两阶段提交（2PC）**

两阶段提交协议是XA用于在全局事务中协调多个资源的机制。

TM和RM间采取两阶段提交的方案来解决一致性问题。

两阶段提交需要一个协调者来掌控所有参与者节点的操作结果并且指引这些节点是否需要最终提交。

成本比较高，需要锁定所有资源。

![2pc](/imgblog/2pc.png)



**JavaEE平台中的分布式事务实现**

JTA（Java Transaction API）：面向应用，应用服务器与资源管理器的高层事务接口。

优点：简单一致的编程模型，跨域分布处理的ACID保证。

局限：DTP模型本身的局限性。

![JTA](/imgblog/JTA.png)



**标准分布式事务解决方案的利弊**

优点：严格的ACID。

缺点：效率低，微服务架构下已经不太适用。

* 全局事务方式下，全局事务管理器TM通过XA接口使用二阶段提交协议（2PC）与资源层（如数据库）进行交互。使用全局事务，数据被Lock的事件跨整个事务，知道全局事务结束。
* 2PC是反可伸缩模式，在事务处理过程中，参与者需要一直持有资源到整个分布式事务结束。这样，当业务规模越来越大的情况下，2PC的局限性就越来越明显，系统可伸缩性会变的很差。
* 与本地事务相比，XA协议的系统开销相当大。而且只有支持XA协议的资源才能参与分布式事务。



**BASE理论**

Ebay架构师提出的。

BA：Basic Availability基本业务可用性（支持分区失败）。

S：Soft state柔性状态（状态允许有段时间不同步，异步）。

E：Eventual consistency最终一致性（最终数据是一致的，但不是实时一致，允许段时间的不同步）。

保证了原子性A和持久性D，降低了一致性C和隔离性I的要求。



**CAP定理**

对于共享数据系统，最多只能同时拥有CAP其中的两个，没法三者兼顾。

* 任两者组合都有其适用场景。
* 真实系统应当是ACID与BASE的混合体。
* 不同类型的业务可以也应当区别对待。

![CAP](/imgblog/CAP.png)



**柔性事务**

* 两阶段型。
* 补偿型。
* 异步确保型。
* 最大努力通知型。

柔性事务中的服务模式：可查询操作，幂等操作（重复调用多次产生的业务结果与调用一次产生的结果相同），TCC操作（误区：很多人把两阶段型操作等同与两阶段提交协议2PC操作，其实TCC也属于两阶段型操作），可补偿操作（TCC操作中的Confirm操作和Cancel操作，其实也可以看作是补偿操作）。

服务模式是柔性事务流程中的特殊实现（实现上对应业务服务要提供相应模式的功能接口），还不算是某一种柔性事务的结局方案。



**柔性事务解决方案：可靠消息最终一致（异步确保型）**

实现：业务处理服务在业务事务提交前，向实时消息服务请求发送消息，实时消息服务只记录消息数据，而不真正发送。业务处理服务在业务事务提交后，向实时消息服务确认发送。只有在得到确认发送指令后，实时消息服务才真正发送。

消息：业务处理服务在业务事务会滚后，向实时消息服务取消发送。消息状态确认系统定期找到未确认发送或会滚发送的消息，向业务处理服务询问消息状态，业务处理服务根据消息ID或内容确定消息是否有效。

行业应用：支付宝，ebay，去哪儿

![dsync](/imgblog/dsync.png)



**柔性事务解决方案：TCC（两阶段型，补偿型）**

实现：一个完整业务活动由一个主业务服务和若干个从业务服务组成。业务活动管理器控制业务活动的一致性，它登记业务活动中的操作，并且业务活动提交时确认所有的TCC型操作的confirm操作，在业务活动取消时调用所有TCC型操作的cancel操作。

成本：实现TCC操作的成本，业务活动日志成本。

适用范围：强隔离性，严格一致性要求的业务活动，适用于执行时间较短的业务（比如处理账户，收费等业务）。

行业应用：支付宝XTS，蚂蚁金融云DTS。

![TCCP](/imgblog/TCCP.png)



**柔性事务解决方案：最大努力通知（定期校对）**

实现：业务活动的主办方，在业务处理之后，向业务活动的被动方发送消息，允许消息丢失。业务活动的被动方分局定时策略，向业务活动主动方查询，回复丢失的业务消息。

行业应用：银行通知，商户通知等。

![trymost](/imgblog/trymost.png)

